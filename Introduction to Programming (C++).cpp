#include <iostream>
#include <vector>

void queen(int n, std::vector <int> a, int row, int* cnt)
{
	//всегда начинаем с нулевого столбца
	int col = 0;

	//идём по строкам от 0 до n-1
	if (row != n)
	{
		//идём по всему массиву
		for (int i = 0; i < n * 2; i += 2)
		{
			//если ячейка не заполнена, то заполняем её
			if (a[i] < 0 && a[i + 1] < 0)
			{
				a[i] = row;
				a[i + 1] = col;
				queen(n, a, row + 1, cnt);
				//если попали сюда, то мы Не смогли поставить ферзя
				//удаляем строку-столбец, чтобы попробовать иную расстановку
				a[i] = -1;
				a[i + 1] = -1;
				//это используется при проверке с другими ферзями
				i = -2;
				//сразу увеличиваем столбец
				++col;
				//если столбец выходит за пределы доски, выходим из функции
				if (col == n)
				{
					return;
				}
			}

			//проверка на пересечение с другими ферзями
			if (i > -1 //если Не смогли поставить ферзя, то не проверяем
				&& (row == a[i] || col == a[i + 1] || row + col == a[i] + a[i + 1] || row - col == a[i] - a[i + 1]))
			{
				++col;
				if (col == n)
				{
					return;
				}
				i = -2;
			}
		}
	}
	//если попали сюда, то все ферзи были расставлены
	//увеличиваем счётчик расстановок, выходим из функции
	++* cnt;
	return;
}

int main() {

	int num = 0;

	std::cin >> num;

	//массив строк-столбцов расставленных ферзей, заполняем невозможными значениями координат
	std::vector <int> a(num * 2, -1);

	if (num < 4 && num != 1)
	{
		std::cout << 0;
	}
	else
	{
		//счётчик расстановок, передаём через указатель, чтобы запоминать значения
		int cnt = 0;
		queen(num, a, 0, &cnt);
		std::cout << cnt;
	}

	return 0;
}